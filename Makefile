#############################################################################
# Makefile for building: bin/midiharmony
# Generated by qmake (2.01a) (Qt 4.8.7) on: mar. déc. 12 00:10:54 2017
# Project:  midiharmony.pro
# Template: app
# Command: /usr/lib/x86_64-linux-gnu/qt4/bin/qmake -o Makefile midiharmony.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_XML_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++-64 -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtXml -I/usr/include/qt4 -I/usr/include -Ibuild
LINK          = g++
LFLAGS        = -m64 -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -ljack -lqjack -lQtXml -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/lib/x86_64-linux-gnu/qt4/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = build/

####### Files

SOURCES       = jack_engine.cpp \
		midiharmony.cpp \
		HarmonyTrigger.cpp \
		Harmony.cpp \
		main.cpp build/moc_jack_engine.cpp \
		build/moc_HarmonyTrigger.cpp \
		build/moc_Harmony.cpp \
		build/moc_midiharmony.cpp \
		qrc_application.cpp
OBJECTS       = build/jack_engine.o \
		build/midiharmony.o \
		build/HarmonyTrigger.o \
		build/Harmony.o \
		build/main.o \
		build/moc_jack_engine.o \
		build/moc_HarmonyTrigger.o \
		build/moc_Harmony.o \
		build/moc_midiharmony.o \
		build/qrc_application.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		midiharmony.pro
QMAKE_TARGET  = midiharmony
DESTDIR       = bin/
TARGET        = bin/midiharmony

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	@$(CHK_DIR_EXISTS) bin/ || $(MKDIR) bin/ 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: midiharmony.pro  /usr/share/qt4/mkspecs/linux-g++-64/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/shared.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/lib/x86_64-linux-gnu/libQtXml.prl \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -o Makefile midiharmony.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/shared.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/lib/x86_64-linux-gnu/libQtXml.prl:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile midiharmony.pro

dist: 
	@$(CHK_DIR_EXISTS) build/midiharmony1.0.0 || $(MKDIR) build/midiharmony1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) build/midiharmony1.0.0/ && $(COPY_FILE) --parents jack_engine.h HarmonyTrigger.h Harmony.h midiharmony.h build/midiharmony1.0.0/ && $(COPY_FILE) --parents application.qrc build/midiharmony1.0.0/ && $(COPY_FILE) --parents jack_engine.cpp midiharmony.cpp HarmonyTrigger.cpp Harmony.cpp main.cpp build/midiharmony1.0.0/ && (cd `dirname build/midiharmony1.0.0` && $(TAR) midiharmony1.0.0.tar midiharmony1.0.0 && $(COMPRESS) midiharmony1.0.0.tar) && $(MOVE) `dirname build/midiharmony1.0.0`/midiharmony1.0.0.tar.gz . && $(DEL_FILE) -r build/midiharmony1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: build/moc_jack_engine.cpp build/moc_HarmonyTrigger.cpp build/moc_Harmony.cpp build/moc_midiharmony.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) build/moc_jack_engine.cpp build/moc_HarmonyTrigger.cpp build/moc_Harmony.cpp build/moc_midiharmony.cpp
build/moc_jack_engine.cpp: Harmony.h \
		HarmonyTrigger.h \
		jack_engine.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) jack_engine.h -o build/moc_jack_engine.cpp

build/moc_HarmonyTrigger.cpp: HarmonyTrigger.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) HarmonyTrigger.h -o build/moc_HarmonyTrigger.cpp

build/moc_Harmony.cpp: HarmonyTrigger.h \
		Harmony.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) Harmony.h -o build/moc_Harmony.cpp

build/moc_midiharmony.cpp: Harmony.h \
		HarmonyTrigger.h \
		jack_engine.h \
		midiharmony.h
	/usr/lib/x86_64-linux-gnu/qt4/bin/moc $(DEFINES) $(INCPATH) midiharmony.h -o build/moc_midiharmony.cpp

compiler_rcc_make_all: qrc_application.cpp
compiler_rcc_clean:
	-$(DEL_FILE) qrc_application.cpp
qrc_application.cpp: application.qrc \
		pics/harmony.jpg \
		pics/midi_harmony.png \
		pics/harmony_icon.jpg \
		harmony.qss
	/usr/lib/x86_64-linux-gnu/qt4/bin/rcc -name application application.qrc -o qrc_application.cpp

compiler_image_collection_make_all: build/qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) build/qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean compiler_rcc_clean 

####### Compile

build/jack_engine.o: jack_engine.cpp jack_engine.h \
		Harmony.h \
		HarmonyTrigger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/jack_engine.o jack_engine.cpp

build/midiharmony.o: midiharmony.cpp midiharmony.h \
		Harmony.h \
		HarmonyTrigger.h \
		jack_engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/midiharmony.o midiharmony.cpp

build/HarmonyTrigger.o: HarmonyTrigger.cpp HarmonyTrigger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/HarmonyTrigger.o HarmonyTrigger.cpp

build/Harmony.o: Harmony.cpp Harmony.h \
		HarmonyTrigger.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/Harmony.o Harmony.cpp

build/main.o: main.cpp midiharmony.h \
		Harmony.h \
		HarmonyTrigger.h \
		jack_engine.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/main.o main.cpp

build/moc_jack_engine.o: build/moc_jack_engine.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/moc_jack_engine.o build/moc_jack_engine.cpp

build/moc_HarmonyTrigger.o: build/moc_HarmonyTrigger.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/moc_HarmonyTrigger.o build/moc_HarmonyTrigger.cpp

build/moc_Harmony.o: build/moc_Harmony.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/moc_Harmony.o build/moc_Harmony.cpp

build/moc_midiharmony.o: build/moc_midiharmony.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/moc_midiharmony.o build/moc_midiharmony.cpp

build/qrc_application.o: qrc_application.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/qrc_application.o qrc_application.cpp

####### Install

install_target: first FORCE
	@$(CHK_DIR_EXISTS) $(INSTALL_ROOT)/usr/bin/ || $(MKDIR) $(INSTALL_ROOT)/usr/bin/ 
	-$(INSTALL_PROGRAM) "bin/$(QMAKE_TARGET)" "$(INSTALL_ROOT)/usr/bin/$(QMAKE_TARGET)"
	-$(STRIP) "$(INSTALL_ROOT)/usr/bin/$(QMAKE_TARGET)"

uninstall_target:  FORCE
	-$(DEL_FILE) "$(INSTALL_ROOT)/usr/bin/$(QMAKE_TARGET)"
	-$(DEL_DIR) $(INSTALL_ROOT)/usr/bin/ 


install_harmonydb: first FORCE
	@$(CHK_DIR_EXISTS) $(INSTALL_ROOT)/usr/share/midiharmony/ || $(MKDIR) $(INSTALL_ROOT)/usr/share/midiharmony/ 
	-$(INSTALL_FILE) /media/DOCS/Code/StaxAudio/midiharmony/midiharmony-3.0/harmonydb.xml $(INSTALL_ROOT)/usr/share/midiharmony/


uninstall_harmonydb:  FORCE
	-$(DEL_FILE) -r $(INSTALL_ROOT)/usr/share/midiharmony/harmonydb.xml
	-$(DEL_DIR) $(INSTALL_ROOT)/usr/share/midiharmony/ 


install:  install_target install_harmonydb  FORCE

uninstall: uninstall_target uninstall_harmonydb   FORCE

FORCE:

